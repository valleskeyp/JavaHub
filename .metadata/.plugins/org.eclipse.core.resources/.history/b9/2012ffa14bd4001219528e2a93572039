package com.valleskeyp.mgdgame;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.collision.Ray;

public class GameClass implements ApplicationListener, InputProcessor {
	private OrthographicCamera camera;
	private SpriteBatch batch;
	private Texture texture;
	private Sprite sprite;
	private Sprite card;
	private Sprite cardFlipped;
	private Sprite cardFlipped2;
	private Sound correct;
	private Music bgMusic;
	private Boolean answer = false;
	
	@Override
	public void create() {		
		float w = Gdx.graphics.getWidth();
		float h = Gdx.graphics.getHeight();
		Gdx.input.setInputProcessor(this);
		
		bgMusic = Gdx.audio.newMusic(Gdx.files.internal("data/BGMusic.mp3"));
		bgMusic.setVolume(0.15f);
		bgMusic.play();
		bgMusic.setLooping(true);
		
		correct = Gdx.audio.newSound(Gdx.files.internal("data/correct.mp3"));
		
		camera = new OrthographicCamera(1, h/w);
		batch = new SpriteBatch();
		
		texture = new Texture(Gdx.files.internal("data/bgGDX.png"));
		texture.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		
		TextureRegion region = new TextureRegion(texture, 0, 0, 800, 480);
		
		sprite = new Sprite(region);
		sprite.setSize(1f, 1f * sprite.getHeight() / sprite.getWidth());
		sprite.setOrigin(sprite.getWidth()/2, sprite.getHeight()/2);
		sprite.setPosition(-sprite.getWidth()/2, -sprite.getHeight()/2);
		
		texture = new Texture(Gdx.files.internal("data/card.png"));
		texture.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		
		region = new TextureRegion(texture, 0, 0, 80, 115);
		
		card = new Sprite(region);
		card.setSize(.08f, .115f);
		card.setOrigin(sprite.getWidth()/2, sprite.getHeight()/2);
		card.setPosition(-.45f, 0);
		card.getBoundingRectangle();
		
		texture = new Texture(Gdx.files.internal("data/cardFlipped.png"));
		texture.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		
		region = new TextureRegion(texture, 0, 0, 80, 115);
		
		cardFlipped = new Sprite(region);
		cardFlipped.setSize(.08f, .115f);
		cardFlipped.setOrigin(sprite.getWidth()/2, sprite.getHeight()/2);
		cardFlipped.setPosition(.1f, 0);
		cardFlipped.getBoundingRectangle();
		
		cardFlipped2 = new Sprite(region);
		cardFlipped2.setSize(.08f, .115f);
		cardFlipped2.setPosition(-.45f, 0);
		cardFlipped2.setOrigin(sprite.getWidth()/2, sprite.getHeight()/2);
	}

	@Override
	public void dispose() {  //     DON'T FORGET TO DISPOSE OF EVERYTHING POSSIBLE!
		batch.dispose();
		texture.dispose();
		correct.dispose();
		bgMusic.dispose();
	}

	@Override
	public void render() {		
		Gdx.gl.glClearColor(0, 0, 0, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		float dt = Gdx.graphics.getDeltaTime();
		
		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		sprite.draw(batch);
		
		if(!answer) {
			card.draw(batch);
		} else {
			cardFlipped2.draw(batch);
			cardMove(dt);
			if (Intersector.overlaps(cardFlipped.getBoundingRectangle(), cardFlipped2.getBoundingRectangle())) {
				answer = false;
				cardFlipped2.setPosition(-.45f, 0);
				//   if cardFlipped COLLIDES with cardFlipped2,
				//   then set answer to false and set cardFlipped2 back to -0.45f,0  x,y position
			}
		}
		
		cardFlipped.draw(batch);
		batch.end();
	}

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}

	@Override
	public boolean keyDown(int keycode) {
		return false;
	}

	@Override
	public boolean keyUp(int keycode) {
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		return false;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		
		return false;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		Vector2 touchPos = new Vector2();
        touchPos.set(Gdx.input.getX(), Gdx.input.getY());

        Ray cameraRay = camera.getPickRay(touchPos.x, touchPos.y);
        
        if (card.getBoundingRectangle().contains(cameraRay.origin.x, cameraRay.origin.y)) {
        	correct.play(1.0f);
        	answer = true;
		}
		return true;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		return false;
	}
	
	public void cardMove(float _dt) {
		cardFlipped2.setPosition(cardFlipped2.getX() + (0.2f * _dt), cardFlipped2.getY());
	}
	// so card changes and then doesn't move. gotta figure out whyyy
	
	
}
