package com.valleskeyp.tubehub;

// Developer Key: AI39si4KF5b83r2FRRpRNeqzhvFeMbv1yZRig8OPeQNiUn8NBRMELTlEYrCUr41wDf-rDQjPjQYdreO9ZGguOBRHnttvBJBW6A //

import android.os.Bundle;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.accounts.AccountManagerCallback;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import java.io.IOException;
import java.io.File;
import java.net.URL;

import com.fasterxml.jackson.core.JsonFactory;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson.JacksonFactory;
import com.google.api.services.youtube.YouTube;
import com.valleskeyp.tubehub.domain.Tokens;

public class Login_Activity extends Activity {
	Context _context;
    EditText _accountField;
    EditText _passwordField;
    
    /** Global instance of the HTTP transport. */
    private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();

    /** Global instance of the JSON factory. */
    private static final JacksonFactory JSON_FACTORY = new JacksonFactory();

    /** Global instance of YouTube object to make all API requests. */ 
    private static YouTube youtube;
    
//     {"installed":{
//      "client_secret":"secret123", 
//      auth_uri":"https://accounts.google.com/o/oauth2/auth",
//    	"token_uri":"https://accounts.google.com/o/oauth2/token",
//    	"redirect_uris":["urn:ietf:wg:oauth:2.0:oob","oob"],
//    	"client_x509_cert_url":"",
//    	"client_id":"222169752897.apps.googleusercontent.com",
//    	"auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs"}}
    
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.login_activity);
        _context = this;
		
        
		Button submitButton = (Button) this.findViewById(R.id.login_button);
        
		_accountField = (EditText) this.findViewById(R.id.user_account);
        _passwordField = (EditText) this.findViewById(R.id.user_password);
        
     
        
		submitButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if (_accountField.getText().toString().length() < 1) { 
					if (_passwordField.getText().toString().length() < 1) {
						// attempt to authenticate credentials

						Intent intent = new Intent(this, OAuthActivity.class);
				        startActivityForResult(intent, 123);
						// when authenticating successful, go to main view
						//Intent i = new Intent(_context, MainActivity.class);
						//startActivityForResult(i, 1);
					} else {
						Toast.makeText(_context, "Please enter a password", Toast.LENGTH_SHORT).show();
					}
				} else {
					Toast.makeText(_context, "Please enter an account", Toast.LENGTH_SHORT).show();
				}
//				Intent i = new Intent(_context, MainActivity.class);
//				startActivityForResult(i, 1);
				
			}
		});
		
    }
	
	@Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(requestCode == REQ_OAUTH){
            if(resultCode == RESULT_OK){
                dealWithResult(data);
            } else
            if(resultCode == RESULT_CANCELED){
                startRefusalActivity();
            }
        }
    }
 
    private void dealWithResult(Intent data) {
        Tokens tokens = (Tokens) data.getSerializableExtra(OAuthActivity.EXTRA_TOKENS);
        Toast.makeText(this, "Access Token retrieved. See your LogCat.", Toast.LENGTH_SHORT).show();
        logResult(tokens);
    }
 
    private void startRefusalActivity() {
        Intent intent = new Intent(this, RefusedAuthActivity.class);
        startActivity(intent);
    }
 
    /**
     * Instead of logging the result you would probably save it to shared preferences.
     * Then you can use your access token whenever you call the YouTube API
     */
    private static void logResult(Tokens tokens) {
        Log.i("Got access token: "+ tokens.getAccessToken());
        Log.i("Got refresh token: "+ tokens.getRefreshToken());
        Log.i("Got token type: "+ tokens.getTokenType());
        Log.i("Got expires in: "+ tokens.getExpiresIn());
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.login_activity, menu);
        return true;
    }
}
