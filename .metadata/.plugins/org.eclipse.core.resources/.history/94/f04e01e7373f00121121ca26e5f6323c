package com.valleskeyp.androidproject1;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.valleskeyp.androidproject1.MainFragment.MainListener;
import com.valleskeyp.androidproject1.SecondFragment.SecondListener;
import com.valleskeyp.lib.FileStuff;
import com.valleskeyp.lib.WebService;
import com.valleskeyp.lib.WebStuff;

import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity implements MainListener, SecondListener{
	
	private WebService receiver;
	
	Boolean _connected = false;
	Context _context;
	TextView _textField;
	String _movieTitle;
	ImageButton _imageButton;
	String _result;
	
	HashMap<String, String> _recent = new HashMap<String, String>();
	Spinner _recentsList;
	ArrayList<String> _recentTitle = new ArrayList<String>();
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(android.R.style.Theme_Black);
        setContentView(R.layout.main_fragment);
        
        _movieTitle = "";
        _context = this;
        getAndUpdate();
                
        LinearLayout ll = new LinearLayout(this);
        ll.setOrientation(LinearLayout.VERTICAL);
        
        //Get elements from XML Layouts
        _textField = (TextView) findViewById(R.id.text_view);
        _recentsList = (Spinner) findViewById(R.id.recents_list);
        _imageButton = (ImageButton) findViewById(R.id.imageButton1);

        
        //setup recents list
        ArrayAdapter<String> listAdapter = new ArrayAdapter<String>(_context, android.R.layout.simple_spinner_item, _recentTitle);
        listAdapter.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);
        _recentsList.setAdapter(listAdapter);
    }
    
    private void updateRecents() {
    	//_recentTitle
    	
    	for(String key : _recent.keySet()) {
    		_recentTitle.add(key);
    	}
    }
    
    @SuppressWarnings("unchecked")
	private HashMap<String, String> getRecents() {
    	Object stored = FileStuff.ReadObjectFile(_context, "recent", false);
    	
    	HashMap<String, String> recents;
    	if (stored == null) {
			Log.i("RECENTS", "NO RECENTS FOUND");
			recents = new HashMap<String, String>();
		} else {
			recents = (HashMap<String, String>) stored;
		}
    	return recents;
    }
    
    //makes sure that whenever the _recent list gets updated, the spinner updates as well
    private void getAndUpdate() {
    	if (!_recentTitle.isEmpty()) {
    		_recentTitle.clear();
		}
    	_recentTitle.add("View recent movies.");
    	_recent = getRecents();
    	updateRecents();
    }
    private void getMovie(String name) {
    	String rtURL = "http://api.rottentomatoes.com/api/public/v1.0/movies.json?apikey=q9gq656wf8xzsacnfza7ndtm&q="+name;
    	URL finalURL;
    	try {
			finalURL = new URL(rtURL);
			MovieRequest mq = new MovieRequest();
			mq.execute(finalURL);
		} catch (MalformedURLException e) {
			Log.e("BAD URL", "MALFORMED URL");
			finalURL = null;
		}
    }
    
    private class MovieRequest extends AsyncTask<URL, Void, String> {
    	protected String doInBackground(URL... urls) {
    		String response = "";
    		for (URL url: urls) {
				response = WebStuff.APICall(url);
			}
    		return response;
    	};
    	@Override
    	protected void onPostExecute(String result) {
    		try {
    			JSONObject json = new JSONObject(result);
    			if (json.getString("total").compareTo("0")==0) {
					Toast toast = Toast.makeText(_context, "Invalid Movie", Toast.LENGTH_SHORT);
					toast.setGravity(Gravity.TOP, 0, 70);
					toast.show();
				} else {
					SecondFragment viewer = (SecondFragment) getFragmentManager().findFragmentById(R.id.secondFragment);
				    if (viewer == null || !viewer.isInLayout()) {
				    	//open SecondView and pass along the JSONdata
						Intent i = new Intent(_context, SecondView.class);
						i.putExtra("JSONdata", result);
						startActivityForResult(i, 1);
				    } else {
				    	try {
				    		ListView listView = (ListView) findViewById(R.id.listView1);
				    		ArrayAdapter<String> nameArray;
				    		nameArray = new ArrayAdapter<String>(_context, android.R.layout.simple_list_item_1, android.R.id.text1);
							JSONArray ary = json.getJSONArray("movies");
							for (int tmp = 0; tmp < ary.length(); tmp++) {
								JSONObject object = ary.getJSONObject(tmp);
								String str = object.getString("title") + "  (" + object.getString("year") + ")";
								nameArray.add(str);
							}
							listView.setAdapter(nameArray);

						} catch (JSONException e) {
							Log.e("JSON", "JSON OBJECT EXCEPTION / NO DATA");
						}
					}
					_result = result;
					
				}
			} catch (JSONException e) {
				Log.e("JSON", "JSON OBJECT EXCEPTION");
			}
    	}
    }
    
    
    //get the Intent data back from SecondView and use it to display the chosen movie and save it to recents
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    	// TODO Auto-generated method stub
    	super.onActivityResult(requestCode, resultCode, data);
    	if (resultCode == RESULT_OK) {
    		//"title" of chosen movie, "result" of json data to parse below
    		String title = (String) data.getExtras().getString("title");
    		String result = (String) data.getExtras().getString("result");
    		
    		try {
    			JSONObject json = new JSONObject(result);
    			JSONArray ary = json.getJSONArray("movies");
    			for (int i = 0; i < ary.length(); i++) {
					JSONObject tmp = ary.getJSONObject(i);
					if ((tmp.getString("title")).equalsIgnoreCase(title)) {
						JSONObject movieObject = json.getJSONArray("movies").getJSONObject(i);
						_movieTitle = movieObject.getString("title");
		    			_textField.setText("\r\nTitle: " + movieObject.getString("title") + "\r\n\r\nRating: " + movieObject.getString("mpaa_rating") + "\r\n\r\nCritics Consensus: " + movieObject.getString("critics_consensus") + "\r\n\r\nSynopsis: " + movieObject.getString("synopsis"));
		    			
		    			_recent.put(movieObject.getString("title"), movieObject.toString());
		    			FileStuff.storeObjectFile(_context, "recent", _recent, false);
		    			getAndUpdate();
					}
				}

    		} catch (JSONException e) {
    			Log.e("JSON", "JSON OBJECT EXCEPTION");
    		}
			
			
		}
    }
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_main, menu);
        return true;
    }
    // q9gq656wf8xzsacnfza7ndtm rotten tomatoes API key

    
    
    // MainListener interface methods from the MainFragment
    
	@Override
	public void onRecentSelect(String recentTitle) {
		String movieString = _recent.get(recentTitle);
		try {
			JSONObject json = new JSONObject(movieString);
			_movieTitle = json.getString("title");
			_textField.setText("\r\nTitle: " + json.getString("title") + "\r\n\r\nRating: " + json.getString("mpaa_rating") + "\r\n\r\nCritics Consensus: " + json.getString("critics_consensus") + "\r\n\r\nSynopsis: " + json.getString("synopsis"));
			} catch (JSONException e) {
				Log.e("JSON", "JSON OBJECT EXCEPTION");
		}
		
	}

	@Override
	public void onSearchGo(String searchedTitle) {
		//check network access first, then begin process of getting api data with field string
		_connected = WebStuff.getConnectionStatus(_context);
		if (_connected) {
			if (searchedTitle.equals("")) {
				return;
			}
			Toast toast = Toast.makeText(_context, "Attempting to retrieve movie data", Toast.LENGTH_LONG);
			toast.setGravity(Gravity.TOP, 0, 70);
			toast.show();
			//have connection, now send API request
			getMovie(searchedTitle.trim().replace(" ", "+"));
		} else {
			//no connection.
			_textField.setText("Sorry, unable to search without a working connection.\n\rPlease connect and try again.");
		}
	}

	@Override
	public void openWebIntent() {
		//open movie website with implicit intent
		if (!(_movieTitle.equals(""))) {   // Ok.  So after more testing this new addition DOES work, it deletes all instances of 'the'.
										   // Then when there is a 'the' deleted in the middle it leaves a '  ' double blank space.
										   // I then convert that to ' the ' to restore the middle instances.  BUT, now I have encountered another
										   // problem in that certain movies are even more problematic.  if movies have the same name, the movie title
										   // must be prepended with the movie's ID number and a '-'...  I am pleased with my logic at this point and
										   // will not pursue it any further I think.
			String str = _movieTitle.replace("The", "").trim().replace("  ", " the ").replace(" ", "_");
			Uri uri = Uri.parse("http://www.rottentomatoes.com/mobile/m/" + str + "/");
			Intent intent = new Intent(Intent.ACTION_VIEW, uri);
			startActivity(intent);
		}
	}
	
	// SecondListener interface method from SecondFragment
	@Override
	public void onListClick(int position) {
		try {
			JSONObject json = new JSONObject(_result);

			JSONObject movieObject = json.getJSONArray("movies").getJSONObject(position);
			_movieTitle = movieObject.getString("title");
			_textField.setText("\r\nTitle: " + movieObject.getString("title") + "\r\n\r\nRating: " + movieObject.getString("mpaa_rating") + "\r\n\r\nCritics Consensus: " + movieObject.getString("critics_consensus") + "\r\n\r\nSynopsis: " + movieObject.getString("synopsis"));

			_recent.put(movieObject.getString("title"), movieObject.toString());
			FileStuff.storeObjectFile(_context, "recent", _recent, false);
			getAndUpdate();
			
		} catch (JSONException e) {
			Log.e("JSON", "JSON OBJECT EXCEPTION");
		}
	}
}
