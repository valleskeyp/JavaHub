package com.valleskeyp.tubehub;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import com.fasterxml.jackson.core.JsonFactory;
import com.google.api.client.auth.oauth2.BearerToken;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.media.MediaHttpUploader;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.InputStreamContent;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson.JacksonFactory;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.model.GeoPoint;
import com.google.api.services.youtube.model.Video;
import com.google.api.services.youtube.model.VideoRecordingDetails;
import com.google.api.services.youtube.model.VideoSnippet;
import com.google.api.services.youtube.model.VideoStatus;

import android.app.IntentService;
import android.content.Intent;

public class UploadService extends IntentService {
	public static final String PARAM_IN_MSG = "imsg";
	public static final String PARAM_OUT_MSG = "omsg";
	
	private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
	private static final JacksonFactory JSON_FACTORY = new JacksonFactory();
	private static Builder youtube;
	
	public UploadService() {
		super("UploadService");
	}

	@Override
	protected void onHandleIntent(Intent intent) {
		String access_token = intent.getStringExtra(PARAM_IN_MSG);
		String title = intent.getStringExtra("title");
		String description = intent.getStringExtra("description");
		String category = intent.getStringExtra("category");
		Boolean geolocation = intent.getBooleanExtra("geolocation", false);
		Double latitude = intent.getDoubleExtra("latitude", 0);
		Double longitude = intent.getDoubleExtra("longitude", 0);
		Boolean privateVideo = intent.getBooleanExtra("private", false);
		
		// path is the location of the selected video
		String videoPath = intent.getStringExtra("path");
		File videoFile = new File(videoPath);
		
		Credential credential = new Credential(BearerToken.authorizationHeaderAccessMethod()).setAccessToken(access_token);
		youtube = new YouTube.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential);
		
		Video videoObjectDefiningMetadata = new Video();
		VideoStatus status = new VideoStatus();
	    if (privateVideo) {
	    	status.setPrivacyStatus("private");
		} else {
			status.setPrivacyStatus("public");
		}
	    videoObjectDefiningMetadata.setStatus(status);
	    
	    VideoSnippet snippet = new VideoSnippet();
	    snippet.setTitle(title);
	    snippet.setDescription(description);
	    
	    List<String> tags = new ArrayList<String>();
	    tags.add("TubeHub");
	    tags.add("From phone");
	    snippet.setTags(tags);
	    VideoRecordingDetails details = new VideoRecordingDetails();
	    if (geolocation) {
	    	GeoPoint geoPoint = new GeoPoint();
	    	geoPoint.setLatitude(latitude);
	    	geoPoint.setLongitude(longitude);
	    	details.setLocation(geoPoint);
	    }
	    
	    videoObjectDefiningMetadata.setSnippet(snippet);
	    videoObjectDefiningMetadata.setRecordingDetails(details);
	    
	    InputStreamContent mediaContent;
		try {
			mediaContent = new InputStreamContent("video/*",
			new BufferedInputStream(new FileInputStream(videoFile)));
			mediaContent.setLength(videoFile.length());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	    
		YouTube.Videos.Insert videoInsert = 
		          youtube.videos().insert("snippet,statistics,status",
		                                  videoObjectDefiningMetadata,
		                                  mediaContent);

		      // Set the upload type and add event listener.
		      MediaHttpUploader uploader = videoInsert.getMediaHttpUploader();
	    
	}

}
