package com.valleskeyp.tubehub;

import java.io.IOException;
import com.google.api.client.auth.oauth2.BearerToken;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.json.GoogleJsonResponseException;
import com.google.api.client.googleapis.media.MediaHttpUploader;
import com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson.JacksonFactory;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.model.Video;


import android.app.IntentService;
import android.content.Intent;
import android.util.Log;
import android.view.Gravity;
import android.widget.Toast;

public class SingleVideoService extends IntentService{
	
	private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
	private static final JacksonFactory JSON_FACTORY = new JacksonFactory();
	private static YouTube youtube;
	
	public SingleVideoService() {
		super("SingleVideoService");	}

	@Override
	protected void onHandleIntent(Intent intent) {
		String id = intent.getStringExtra("id");
		String accessToken = intent.getStringExtra("accessToken");
		String title = intent.getStringExtra("title");
		String description = intent.getStringExtra("description");
		String category = intent.getStringExtra("category");
		Boolean geolocation = intent.getBooleanExtra("geolocation", false);
		Double latitude = intent.getDoubleExtra("latitude", 0);
		Double longitude = intent.getDoubleExtra("longitude", 0);
		Boolean privateVideo = intent.getBooleanExtra("private", false);
		
		Credential credential = new Credential(BearerToken.authorizationHeaderAccessMethod()).setAccessToken(accessToken);
		youtube = new YouTube.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential).setApplicationName("TubeHub").build();
		
		Video videoObjectDefiningMetadata = new Video();
		videoObjectDefiningMetadata.setId(id);
		
		
		try {
			
			YouTube.Videos.Update videoUpdate;
			
			videoUpdate = youtube.videos().update("snippet,statistics,status,recordingDetails",
					videoObjectDefiningMetadata);
			
			MediaHttpUploader uploader = videoUpdate.getMediaHttpUploader();

			uploader.setDirectUploadEnabled(false);

			MediaHttpUploaderProgressListener progressListener =
					new MediaHttpUploaderProgressListener() {
				public void progressChanged(MediaHttpUploader uploader)
						throws IOException {
					switch (uploader.getUploadState()) {
					case INITIATION_STARTED:
						Log.i("UPLOAD_PROGRESS","Initiation Started");
						break;
					case INITIATION_COMPLETE:
						Log.i("UPLOAD_PROGRESS","Initiation Completed");
						Toast msg = Toast.makeText(getApplication(), "Uploading...", Toast.LENGTH_LONG);
						msg.setGravity(Gravity.CENTER, msg.getXOffset() / 2, msg.getYOffset() / 2);
						msg.show();
						Intent dialogIntent = new Intent(getBaseContext(), MainActivity.class);
						dialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
						getApplication().startActivity(dialogIntent);
						break;
					case MEDIA_IN_PROGRESS:
						Log.i("UPLOAD_PROGRESS","Upload In Progress");
						Log.i("UPLOAD_PROGRESS","Upload percentage: " + uploader.getProgress());
						break;
					case MEDIA_COMPLETE:
						Log.i("UPLOAD_PROGRESS","Upload Completed");
	    				break;
	    			case NOT_STARTED:
	    				Log.i("UPLOAD_PROGRESS","Upload Not Started");
	    				break;
	    			}
	    		}
	    	};
	    	uploader.setProgressListener(progressListener);
	    	
	    	Video updatedVideo = videoUpdate.execute();
	    	
	    	Log.i("UPLOADSERVICE", "\n================== Returned Video ==================\n");
	    	Log.i("UPLOADSERVICE", "  - Id: " + updatedVideo.getId());
	    	Log.i("UPLOADSERVICE", "  - Title: " + updatedVideo.getSnippet().getTitle());
	    	Log.i("UPLOADSERVICE", "  - Tags: " + updatedVideo.getSnippet().getTags());
	    	Log.i("UPLOADSERVICE", "  - Privacy Status: " + updatedVideo.getStatus().getPrivacyStatus());
	    	Log.i("UPLOADSERVICE", "  - Video Count: " + updatedVideo.getStatistics().getViewCount());

	    	
	    	
	    } catch (GoogleJsonResponseException e) {
	        System.err.println("GoogleJsonResponseException code: " + e.getDetails().getCode() + " : " + e.getDetails().getMessage());
	        
	        e.printStackTrace();
	      } catch (IOException e) {
	        System.err.println("IOException: " + e.getMessage());
	        
	        e.printStackTrace();
	      } catch (Throwable t) {
	        System.err.println("Throwable: " + t.getMessage());
	        
	        t.printStackTrace();
	      }
	}

}
