package com.valleskeyp.tubehub;

import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.content.IntentFilter;
import android.view.Gravity;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.Spinner;
import android.widget.Toast;

public class EditActivity extends Activity {
	
	String _path;
	String _accessToken;
	
	EditText _title;
	EditText _description;
	Spinner _category;
	RadioButton _geolocation;
	RadioButton _privateVideo;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.edit_activity);
        
        _title = (EditText) this.findViewById(R.id.edit_title);
        _description = (EditText) this.findViewById(R.id.edit_description);
        _category = (Spinner) this.findViewById(R.id.edit_category);
        
        _geolocation = (RadioButton) this.findViewById(R.id.edit_geo_false);
        _privateVideo = (RadioButton) this.findViewById(R.id.edit_private_false);
        
        Button deleteButton = (Button) this.findViewById(R.id.edit_delete);
        Button submitButton = (Button) this.findViewById(R.id.edit_submit);
        
        Intent intent = getIntent();
        if (intent.getStringExtra("path") != null) {
        	// User has entered view to upload a new video to YouTube
			_path = intent.getStringExtra("path");
			_accessToken = intent.getStringExtra("accessToken");
		} else {
			// User has entered view to edit a video
			// - parse video data, fill fields with data, retain video id for edit call
			// - show a delete button by title?
		}
        
        
        submitButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// on submit, validate all of the fields.  if valid submit data to upload service
				if (validation()) {
					
			        Intent msgIntent = new Intent(EditActivity.this, YouTubeService.class);
					msgIntent.putExtra(UploadService.PARAM_IN_MSG, _accessToken);
					msgIntent.putExtra(UploadService.PARAM_IN_MSG, _path);
					msgIntent.putExtra(UploadService.PARAM_IN_MSG, _title.getText().toString());
					msgIntent.putExtra(UploadService.PARAM_IN_MSG, _description.getText().toString());
					msgIntent.putExtra(UploadService.PARAM_IN_MSG, _category.getItemAtPosition(_category.getSelectedItemPosition()).toString());
					msgIntent.putExtra(UploadService.PARAM_IN_MSG, _geolocation.isChecked());
					msgIntent.putExtra(UploadService.PARAM_IN_MSG, _privateVideo.isChecked());
					
					startService(msgIntent);
				}
				
			}
		});
        
        deleteButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// will sent delete request to youtube for video in editing - use ID or something
				
			}
		});
    }
    
    public boolean validation() {
    	if (_title.getText().toString().length() < 1) {
    		Toast msg = Toast.makeText(EditActivity.this, "Please enter a Title", Toast.LENGTH_LONG);
			msg.setGravity(Gravity.CENTER, msg.getXOffset() / 2, msg.getYOffset() / 1.5);
			msg.show();
    		return false;
    	} else if (_description.getText().toString().length() < 1) {
    		Toast msg = Toast.makeText(EditActivity.this, "Please enter a description", Toast.LENGTH_LONG);
			msg.setGravity(Gravity.CENTER, msg.getXOffset() / 2, msg.getYOffset() / 1.5);
			msg.show();
    		return false;
    	} else {
    		return true;
    	}
    }
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_edit, menu);
        return true;
    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch(resultCode)
        {
        case 999:
            setResult(999);
            finish();
        }
        super.onActivityResult(requestCode, resultCode, data);
    }
}
